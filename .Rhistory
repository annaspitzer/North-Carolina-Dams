library(dplyr)
library(tidyverse)
library(tigris)
library(sf)
western_counties <- c("Alleghany", "Ashe", "Avery", "Buncombe", "Burke", "Caldwell",
"Cherokee", "Clay", "Graham", "Haywood", "Henderson", "Jackson",
"Macon", "Madison", "McDowell", "Mitchell", "Polk", "Rutherford",
"Swain", "Transylvania", "Watauga", "Wilkes", "Yancey")
piedmont_counties <- c("Alamance", "Alexander", "Anson", "Cabarrus", "Caswell", "Catawba",
"Chatham", "Cleveland", "Davidson", "Davie", "Durham", "Forsyth", "Franklin",
"Gaston", "Granville", "Guilford", "Iredell", "Lee", "Lincoln", "Mecklenburg",
"Montgomery", "Moore", "Orange", "Person", "Randolph", "Richmond", "Rockingham",
"Rowan", "Stanly", "Stokes", "Surry", "Union", "Vance",
"Wake", "Warren", "Yadkin")
coastal_counties <-c("Bertie", "Beaufort", "Brunswick", "Camden", "Carteret", "Chowan",
"Craven", "Currituck", "Dare", "Gates", "Hertford", "Hyde", "New Hanover",
"Onslow", "Pamlico", "Pasquotank", "Pender", "Perquimans", "Tyrrell", "Washington",
"Bladen", "Columbus", "Cumberland", "Duplin", "Edgecombe", "Greene", "Halifax", "Harnett", "Hoke",
"Johnston", "Jones", "Lenoir", "Martin", "Nash", "Northampton", "Pitt", "Robeson", "Sampson",
"Scotland", "Wayne", "Wilson")
# dams and basins
NCdams <- read_csv("Final Datasets/AllNCDams.csv")
NCdams_censustracts <- read_csv("Final Datasets/NCDams_Censustracts.csv") #dams with census tract info
NCdams_basins <- read_csv("Final Datasets/NCdams_Basins.csv")
NCdams_censusandbasin <- read_csv("Final Datasets/NCdams_censusandbasin.csv") #has dams and their respective census and basin info
#SOVI
# just for RPL Themes and Aggregate
NCsovi_censustract <- read_csv("Final Datasets/NCsovi_censustract.csv")
NCsovi_county <- read_csv("Final Datasets/NCsovi_county.csv")
# FINAL (entire combination of every dam and its corresponding SOVI RPL themes)
finaldata_censustract <- read_csv("Final Datasets/finaldata_censustract.csv")
finaldata_county <- read_csv("Final Datasets/finaldata_county.csv")
source("RScripts/LoadData.R")
source("RScripts/LoadData.R")
source("RScripts/LoadData.R")
### STATS BY COUNTY) ###
summary_county <- finaldata_county %>%
group_by(CountyID, County) %>%
summarise(
total_dams = ifelse(all(is.na(NID_ID)), 0, n_distinct(NID_ID)),
population = round(mean(E_TOTPOP)),
dams_p_person = (total_dams / population),
high_hazard = sum(Hazard_Potential_Classification == "High", na.rm = TRUE),
hh_dams_p_person = high_hazard / population,
avg_year_completed = round(mean(Year_Completed, na.rm = TRUE)),
avg_age = 2024 - round(mean(Year_Completed, na.rm = TRUE)),
prop_less_than_25_feet = mean(NID_Height_Category == "Less than 25 feet", na.rm = TRUE),
prop_25_50_feet = mean(NID_Height_Category == "25-50 feet", na.rm = TRUE),
prop_51_100_feet = mean(NID_Height_Category == "51-100 feet", na.rm = TRUE),
prop_greater_than_100_feet = mean(NID_Height_Category == "Greater than 100 feet", na.rm = TRUE),
prop_undetermined = mean(NID_Height_Category == "Undetermined", na.rm = TRUE),
avg_distance_to_city = mean(Distance_to_Nearest_City_Miles, na.rm = TRUE),
avg_drainage_area = mean(Drainage_Area_Sq_Miles, na.rm = TRUE),
avg_volume = mean(Volume_Cubic_Yards, na.rm = TRUE),
prop_low_risk = mean(Hazard_Potential_Classification == "Low", na.rm = TRUE),
prop_significant_risk = mean(Hazard_Potential_Classification == "Significant", na.rm = TRUE),
# SOVI themes
RPL_1 = mean(RPL_THEME1, na.rm = TRUE),
RPL_2 = mean(RPL_THEME2, na.rm = TRUE),
RPL_3 = mean(RPL_THEME3, na.rm = TRUE),
RPL_4 = mean(RPL_THEME4, na.rm = TRUE),
RPL_total = mean(RPL_THEMES, na.rm = TRUE)
)
View(summary_county)
# Regional statistics for poster
summary_region <- finaldata_county %>%
filter(Region %in% c("Western", "Piedmont", "Coastal")) %>%
group_by(Region) %>%
summarise(
`High Hazard Dams (HHD)` = sum(Hazard_Potential_Classification == "High", na.rm = TRUE),
Population = sum(E_TOTPOP[!duplicated(CountyID)], na.rm = TRUE),  # Summing unique County population
`Mean Age of Dam` = mean(2024-Year_Completed, na.rm = TRUE),
`HHD / Person` = `High Hazard Dams (HHD)` / Population,
`Mean Distance to City` = mean(Distance_to_Nearest_City_Miles, na.rm = TRUE),
`Mean Storage` = mean(Volume_Cubic_Yards, na.rm = TRUE),
`Storage / Person` = `Mean Storage` / Population,
.groups = "drop"
)
View(summary_region)
### STATS BY COUNTY) ###
summary_county <- finaldata_county %>%
group_by(CountyID, County) %>%
summarise(
total_dams = ifelse(all(is.na(NID_ID)), 0, n_distinct(NID_ID)),
population = round(mean(E_TOTPOP)),
dams_p_person = (total_dams / population),
high_hazard = sum(Hazard_Potential_Classification == "High", na.rm = TRUE),
hh_dams_p_person = high_hazard / population,
avg_year_completed = round(mean(Year_Completed, na.rm = TRUE)),
avg_age = 2024 - round(mean(Year_Completed, na.rm = TRUE)),
prop_less_than_25_feet = mean(NID_Height_Category == "Less than 25 feet", na.rm = TRUE),
prop_25_50_feet = mean(NID_Height_Category == "25-50 feet", na.rm = TRUE),
prop_51_100_feet = mean(NID_Height_Category == "51-100 feet", na.rm = TRUE),
prop_greater_than_100_feet = mean(NID_Height_Category == "Greater than 100 feet", na.rm = TRUE),
prop_undetermined = mean(NID_Height_Category == "Undetermined", na.rm = TRUE),
avg_distance_to_city = mean(Distance_to_Nearest_City_Miles, na.rm = TRUE),
avg_drainage_area = mean(Drainage_Area_Sq_Miles, na.rm = TRUE),
avg_volume = mean(Volume_Cubic_Yards, na.rm = TRUE),
prop_low_risk = mean(Hazard_Potential_Classification == "Low", na.rm = TRUE),
prop_significant_risk = mean(Hazard_Potential_Classification == "Significant", na.rm = TRUE),
# SOVI themes
RPL_1 = mean(RPL_THEME1, na.rm = TRUE),
RPL_2 = mean(RPL_THEME2, na.rm = TRUE),
RPL_3 = mean(RPL_THEME3, na.rm = TRUE),
RPL_4 = mean(RPL_THEME4, na.rm = TRUE),
RPL_total = mean(RPL_THEMES, na.rm = TRUE)
)
View(summary_county)
source("R Code/LoadData.R")
source("RScripts/LoadData.R")
river_basins <- st_read("Original Datasets/Major_Basins") %>%
select(-c(PlanLink, GlobalID)) %>%
rename(Basin_Sq_Miles = Sq_Miles) %>%
rename(Basin_Acres = Acres) %>%
rename(Basin_Name = Name)
aggregated_by_basin <- finaldata_county %>%
group_by(Basin_Name) %>%
summarise(
`High Hazard Dams (HHD)` = sum(Hazard_Potential_Classification == "High", na.rm = TRUE),
# Population = sum(POPULATION, na.rm = TRUE),
`Mean Age of Dam` = mean(2024-Year_Completed, na.rm = TRUE),
# `HHD / Person` = `High Hazard Dams (HHD)` / Population,
`Mean Distance to City` = mean(Distance_to_Nearest_City_Miles, na.rm = TRUE),
`Mean Storage` = mean(`Normal_Storage_Acre-Ft`, na.rm = TRUE),
`Mean Drainage Area` =mean(Drainage_Area_Sq_Miles, na.rm=TRUE),
# `Storage / Person` = `Mean Storage` / Population,
.groups = "drop"
) %>%
mutate_if(is.numeric, round, 2)
source("RScripts/LoadData.R")
highhazard_coordinates <- finaldata_county %>%
select(Dam_Name, Latitude, Longitude, Hazard_Potential_Classification) %>%
filter(Hazard_Potential_Classification == "High")
NC_counties <- counties(state = 37) %>%
st_transform(crs = 4326) %>%
select(GEOID, geometry) %>%
rename(CountyID = GEOID) #this is only five digits as opposed to census or blockgroup IDs
# Make dataframe that's just CountyID, geometry, and SOVI score
NCsovi_county_sf <- left_join(NC_counties, NCsovi_county, by = "CountyID") %>%
select(CountyID, RPL_THEMES) %>%
st_as_sf()
type(NC_counties$CountyID)
class(NC_counties$CountyID)
class(NCsovi_county$CountyID)
source("RScripts/LoadData.R")
highhazard_coordinates <- finaldata_county %>%
select(Dam_Name, Latitude, Longitude, Hazard_Potential_Classification) %>%
filter(Hazard_Potential_Classification == "High")
NC_counties <- counties(state = 37) %>%
st_transform(crs = 4326) %>%
select(GEOID, geometry) %>%
rename(CountyID = GEOID) #this is only five digits as opposed to census or blockgroup IDs
# Make dataframe that's just CountyID, geometry, and SOVI score
NCsovi_county_sf <- left_join(NC_counties, NCsovi_county, by = "CountyID") %>%
select(CountyID, RPL_THEMES) %>%
st_as_sf()
# GGplot that shades county by SOVI with high hazard dams overlaid
ggplot(data = NCsovi_county_sf) +
geom_sf(aes(fill = RPL_THEMES), color = "black", size = 0.2) +
geom_point(data = highhazard_coordinates, aes(x = Longitude, y = Latitude),
color = "grey", size = 0.5) +
scale_fill_viridis_c(option = "plasma", name = "SoVI Score Groups") +
labs(title = "Social Vulnerability Index (SoVI) by County") +
labs(subtitle = "High Hazard Potential Dams Overlayed") +
theme_minimal() +
theme(axis.text = element_blank(), axis.ticks = element_blank())
#SOVI
# just for RPL Themes and Aggregate
NCsovi_censustract <- read_csv("Final Datasets/NCsovi_censustract.csv") %>%
mutate(GEOID = as.character(GEOID))
NC_tracts <- tracts(state = 37) %>%
st_transform(crs = 4326) %>%
select(GEOID, geometry)
NCsovi_censustract_sf <- left_join(NC_tracts, NCsovi_censustract, by = "GEOID") %>%
select(GEOID, E_TOTPOP, RPL_THEMES) %>%
mutate(RPL_THEMES = ifelse(RPL_THEMES < 0 | RPL_THEMES > 1, NA, RPL_THEMES)) %>%  # Set out-of-range values to NA
# filter(E_TOTPOP > 0) %>%  ## not important right now, but the SOVI population estimates don't always match the actual census
st_as_sf()
ggplot(data = NCsovi_censustract_sf) +
geom_sf(aes(fill = RPL_THEMES), color = "black", size = 0.2) +
geom_point(data = highhazard_coordinates, aes(x = Longitude, y = Latitude),
color = "grey", size = 0.5) +
scale_fill_viridis_c(option = "plasma", name = "SoVI Score Groups") +
labs(title = "Social Vulnerability Index (SoVI) by Census Tract") +
labs(subtitle = "High Hazard Potential Dams Overlayed") +
theme_minimal() +
theme(axis.text = element_blank(), axis.ticks = element_blank())
damcondition <- finaldata_county %>%
filter(Hazard_Potential_Classification == "High") %>%
select(Dam_Name, Latitude, Longitude, Condition_Assessment) %>%
mutate(Condition_Assessment = factor(Condition_Assessment,
levels = c("Satisfactory", "Fair",
"Poor", "Unsatisfactory",
"Not Rated or Unavailable")))
damcondition_clean <- damcondition %>%
filter(!is.na(Latitude) & !is.na(Longitude)) %>%
mutate(Condition_Assessment = case_when(
Condition_Assessment %in% c("Not Rated", "Not Available") ~ "Not Rated/Unavailable",
TRUE ~ Condition_Assessment
)) %>%
mutate(Condition_Assessment = factor(Condition_Assessment,
levels = c("Satisfactory", "Fair",
"Poor", "Unsatisfactory",
"Not Rated/Unavailable")))  # Define custom order
ggplot(NCsovi_county_sf) +
geom_sf(finll = "gray", color = "black", size = 0.05) +  # Plot the county boundaries
geom_point(data = damcondition_clean,
aes(x = Longitude, y = Latitude, color = Condition_Assessment),
size = 1, alpha = 0.8) +  # Add points for dam conditions
scale_color_manual(values = c("Satisfactory" = "darkgreen",
"Fair" = "#FDDA0D",
"Unsatisfactory" = "red",
"Poor" = "#420D09",
"Not Rated/Unavailable" = "gray"),
drop = FALSE) +
theme_minimal() +
labs(title = "High-Hazard Dams in North Carolina by Condition",
color = "Condition Assessment",
x = "Longitude",
y = "Latitude")
###  ###
aggregated_dams_all <- finaldata_county %>%
group_by(CountyID, Region) %>%
summarise(
total_dams = ifelse(all(is.na(NID_ID)), 0, n_distinct(NID_ID)),
population = round(mean(E_TOTPOP)),
dams_p_person = (total_dams / population),
high_hazard = sum(Hazard_Potential_Classification == "High", na.rm = TRUE),
hh_dams_p_person = high_hazard / population,
avg_year_completed = round(mean(Year_Completed, na.rm = TRUE)),
avg_age = 2024 - round(mean(Year_Completed, na.rm = TRUE)),
prop_less_than_25_feet = mean(NID_Height_Category == "Less than 25 feet", na.rm = TRUE),
prop_25_50_feet = mean(NID_Height_Category == "25-50 feet", na.rm = TRUE),
prop_51_100_feet = mean(NID_Height_Category == "51-100 feet", na.rm = TRUE),
prop_greater_than_100_feet = mean(NID_Height_Category == "Greater than 100 feet", na.rm = TRUE),
prop_undetermined = mean(NID_Height_Category == "Undetermined", na.rm = TRUE),
avg_distance_to_city = mean(Distance_to_Nearest_City_Miles, na.rm = TRUE),
avg_drainage_area = mean(Drainage_Area_Sq_Miles, na.rm = TRUE),
avg_volume = mean(Volume_Cubic_Yards, na.rm = TRUE),
prop_low_risk = mean(Hazard_Potential_Classification == "Low", na.rm = TRUE),
prop_significant_risk = mean(Hazard_Potential_Classification == "Significant", na.rm = TRUE),
# SOVI themes
RPL_1 = mean(RPL_THEME1, na.rm = TRUE),
RPL_2 = mean(RPL_THEME2, na.rm = TRUE),
RPL_3 = mean(RPL_THEME3, na.rm = TRUE),
RPL_4 = mean(RPL_THEME4, na.rm = TRUE),
RPL_total = mean(RPL_THEMES, na.rm = TRUE),
# Create ranks based on quantiles
RPL_total_rank = ntile(RPL_THEMES, 4),  # Dividing into quartiles
.groups = "drop"
) %>%
distinct(CountyID, .keep_all = TRUE)  # Ensure one row per CountyID
# Regional statistics for poster
aggregated_by_region <- finaldata_county %>%
filter(Region %in% c("Western", "Piedmont", "Coastal")) %>%
group_by(Region) %>%
summarise(
`High Hazard Dams (HHD)` = sum(Hazard_Potential_Classification == "High", na.rm = TRUE),
Population = sum(E_TOTPOP[!duplicated(CountyID)], na.rm = TRUE),  # Summing unique County population
`Mean Age of Dam` = mean(2024-Year_Completed, na.rm = TRUE),
`HHD / Person` = `High Hazard Dams (HHD)` / Population,
`Mean Distance to City` = mean(Distance_to_Nearest_City_Miles, na.rm = TRUE),
`Mean Storage` = mean(Volume_Cubic_Yards, na.rm = TRUE),
`Storage / Person` = `Mean Storage` / Population,
.groups = "drop"
)
ownership_condition_summary <- finaldata %>%
group_by(Primary_Owner_Type, Condition_Assessment) %>%
summarise(dam_count = n(), .groups = "drop") %>%
arrange(Primary_Owner_Type, desc(dam_count))
ownership_condition_summary <- finaldata_county %>%
group_by(Primary_Owner_Type, Condition_Assessment) %>%
summarise(dam_count = n(), .groups = "drop") %>%
arrange(Primary_Owner_Type, desc(dam_count))
ownership_condition_summary
ggplot(ownership_condition_summary, aes(x = reorder(Primary_Owner_Type, -dam_count), y = dam_count, fill = Condition_Assessment)) +
geom_bar(stat = "identity") +
labs(
title = "Dam Ownership by Condition Assessment",
x = "Primary Owner Type",
y = "Number of Dams",
fill = "Condition Assessment"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarize the dam data by Primary_Owner_Type and Condition_Assessment
summary_table <- finaldata %>%
filter(Hazard_Potential_Classification == "High") %>%
group_by(Primary_Owner_Type, Condition_Assessment) %>%
summarise(dam_count = n(), .groups = "drop") %>%
pivot_wider(
names_from = Condition_Assessment,
values_from = dam_count,
values_fill = 0
) %>%
mutate(Total_Dams = rowSums(across(-Primary_Owner_Type), na.rm = TRUE)) %>%
select(Primary_Owner_Type, Total_Dams, everything())
ggplot(regression_county_filtered, aes(x = high_hazard_count)) +
geom_histogram(binwidth = 2, fill = "steelblue", color = "black") +
geom_vline(xintercept = mean_dams, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = median_dams, color = "green", linetype = "dotted", linewidth = 1) +
annotate("text", x = mean_dams + 5, y = 10, label = paste("Mean:", round(mean_dams, 2)), color = "red") +
annotate("text", x = median_dams + 5, y = 9, label = paste("Median:", round(median_dams, 2)), color = "green") +
annotate("text", x = max(regression_county_filtered$high_hazard_count) * 0.7, y = 8,
label = paste("Variance:", round(variance_dams, 2)), color = "black") +
labs(title = "Distribution of Counties by High Hazard Dam Count",
x = "Number of High Hazard Dams",
y = "Number of Counties") +
theme_minimal()
source("RScripts/AllNCAggregate.R")
rlang::last_trace()
source("RScripts/AllNCAggregate.R")
source("RScripts/SummaryData.R")
# Change variables based on summary table
lm_model <- lm(SOVI ~ high_hazard_count + avg_height + avg_storage + avg_distance,
data = regression_county)
View(lm_model)
# Summarize the dam data by Primary_Owner_Type and Condition_Assessment
test <- finaldata_county %>%
filter(Hazard_Potential_Classification == "High") %>%
group_by(Primary_Owner_Type, Condition_Assessment) %>%
summarise(dam_count = n(), .groups = "drop") %>%
pivot_wider(
names_from = Condition_Assessment,
values_from = dam_count,
values_fill = 0
) %>%
mutate(Total_Dams = rowSums(across(-Primary_Owner_Type), na.rm = TRUE)) %>%
select(Primary_Owner_Type, Total_Dams, everything())
View(summary_region)
View(test)
ownership_condition_summary <- finaldata_county %>%
group_by(Primary_Owner_Type, Condition_Assessment) %>%
summarise(dam_count = n(), .groups = "drop") %>%
arrange(Primary_Owner_Type, desc(dam_count))
ownership_condition_summary
ggplot(ownership_condition_summary, aes(x = reorder(Primary_Owner_Type, -dam_count), y = dam_count, fill = Condition_Assessment)) +
geom_bar(stat = "identity") +
labs(
title = "Dam Ownership by Condition Assessment",
x = "Primary Owner Type",
y = "Number of Dams",
fill = "Condition Assessment"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
